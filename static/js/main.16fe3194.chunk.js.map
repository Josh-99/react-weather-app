{"version":3,"sources":["WeatherUpdates/Temp.js","WeatherUpdates/Time.js","WeatherUpdates/WeatherIcon.js","WeatherUpdates/Location.js","WeatherUpdates/Loading.js","WeatherUpdates/Day.js","WeatherUpdates/Search.js","WeatherUpdates/Error.js","App.js","reportWebVitals.js","index.js"],"names":["Temp","temp","weatherInfo","className","Math","round","Time","time","WeatherIcon","src","weather","icon","alt","description","Location","city","country","error","Loading","Day","day","Search","setCity","onBlur","e","target","value","Error","App","useState","setCountry","setWeather","setError","sunrise","setSunrise","sunset","setSunset","isDayTime","setIsDayTime","apiKey","useEffect","fetch","then","firstResponse","ok","console","log","json","sys","name","latitude","coord","lat","longitude","lon","catch","response","err","message","getTimeSeconds","arr","split","sunriseTime","Date","toLocaleTimeString","sunsetTime","currentTime","document","body","classList","add","remove","weatherReducer","hourly","reduce","acc","getDate","dt","dayName","toLocaleDateString","weekday","push","Object","entries","map","times","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uMAeeA,EAbF,SAAC,GAAqB,IACJC,EADfC,EAAkB,EAAlBA,YAKd,OACE,qBACEC,UAAU,kCADZ,oBAL2BF,EAQFC,EAAYD,KAP9BG,KAAKC,MAAa,GAAPJ,GAAa,IAI/B,YCFWK,EAJF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OAAO,qBAAKJ,UAAU,iBAAf,SAAiCI,KCS3BC,EAVK,SAAC,GAAqB,IAAnBN,EAAkB,EAAlBA,YACrB,OACE,qBACEO,IAAG,2CAAsCP,EAAYQ,QAAQ,GAAGC,KAA7D,WACHC,IAAKV,EAAYQ,QAAQ,GAAGG,YAC5BV,UAAU,oBCGDW,EARE,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACjC,OACE,qBAAKd,UAAU,WAAf,SACa,OAAVc,EAAA,UAAoBF,EAApB,aAA6BC,GAA7B,UAA4CC,MCCpCC,EAJC,WACd,OAAO,qBAAKf,UAAU,UAAf,yBCGMgB,EAJH,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACb,OAAO,qBAAKjB,UAAU,iCAAf,SAAiDiB,K,OCS3CC,EATA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OACE,wBAAOnB,UAAU,mBAAjB,UACE,cAAC,IAAD,CAAUA,UAAU,gBACpB,uBAAOA,UAAU,QAAQoB,OAAQ,SAACC,GAAD,OAAOF,EAAQE,EAAEC,OAAOC,cCDhDC,EAJD,SAAC,GAAe,IAAbV,EAAY,EAAZA,MACf,OAAO,qBAAKd,UAAU,QAAf,SAAwBc,KCoKlBW,MA5Jf,WACE,MAAwBC,mBAAS,aAAjC,mBAAOd,EAAP,KAAaO,EAAb,KACA,EAA8BO,mBAAS,MAAvC,mBAAOb,EAAP,KAAgBc,EAAhB,KACA,EAA8BD,mBAAS,MAAvC,mBAAOnB,EAAP,KAAgBqB,EAAhB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOZ,EAAP,KAAce,EAAd,KACA,EAA8BH,mBAAS,MAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA4BL,mBAAS,MAArC,mBAAOM,EAAP,KAAeC,EAAf,KACA,EAAgCP,mBAAS,CACvC,SACA,UACA,YACA,WACA,SACA,WACA,WAPF,mBASA,GATA,UASkCA,oBAAS,IAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACMC,EAAS,mCAsEf,GApEAC,qBAAU,WACRC,MAAM,qDAAD,OACkD1B,EADlD,kBACgEwB,IAElEG,MAAK,SAACC,GACL,IAAKA,EAAcC,GAEjB,MADAC,QAAQC,IAAIH,GACNhB,EAGR,OADAkB,QAAQC,IAAIH,GACLA,EAAcI,UAEtBL,MAAK,SAACC,GACLE,QAAQC,IAAIH,EAAeA,EAAcK,IAAIf,SAC7CH,EAAWa,EAAcK,IAAIhC,SAC7BM,EAAQqB,EAAcM,MACtBf,EAAWS,EAAcK,IAAIf,SAC7BG,EAAUO,EAAcK,IAAIb,QAC5BH,EAAS,MACT,IAAMkB,EAAWP,EAAcQ,MAAMC,IAC/BC,EAAYV,EAAcQ,MAAMG,IAEtC,OAAOb,MAAM,uDAAD,OAC6CS,EAD7C,gBAC6DG,EAD7D,+DAC6Hd,OAG1IgB,OAAM,SAACtC,GACN4B,QAAQC,IAAI7B,GACZe,EAAS,wDAEVU,MAAK,SAACc,GAEL,OAAOA,EAAST,UAEjBL,MAAK,SAACc,GACLX,QAAQC,IAAIU,GACZzB,EAAWyB,MAGZD,OAAM,SAACE,GACNZ,QAAQC,IAAIW,EAAIC,YAGpB,IAAMC,EAAiB,SAACpD,GACtB,IAAMqD,EAAMrD,EAAKsD,MAAM,KAEvB,OADyB,KAATD,EAAI,GAAqB,GAATA,EAAI,IAKhCE,EAAc,IAAIC,KAAe,IAAV9B,GAAgB+B,mBAAmB,SAC1DC,EAAa,IAAIF,KAAc,IAAT5B,GAAe6B,mBAAmB,SACxDE,GAAc,IAAIH,MAAOC,mBAAmB,SAClDnB,QAAQC,IAAIgB,EAAaG,EAAYC,IAOZ,KAHvBP,EAAeO,GAAeP,EAAeG,IAC7CH,EAAeO,GAAeP,EAAeM,KAG7CE,SAASC,KAAKC,UAAUC,IAAI,SAC5BhC,GAAa,IAEb6B,SAASC,KAAKC,UAAUE,OAAO,WAEhC,CAACtC,EAASE,EAAQpB,IAEL,OAAZL,EACF,OAAO,cAAC,EAAD,IAGT,IAAM8D,EAAiB9D,EAAQ+D,OAAOC,QAAO,SAACC,EAAKzE,GACjD,IAAM0E,EAAU,IAAIb,KAAsB,IAAjB7D,EAAY2E,IAE/BC,EADK,IAAIf,KAAKa,GACCG,mBAAmB,UAAW,CACjDC,QAAS,SAYX,OAPIL,EAAIG,GAENH,EAAIG,GAASG,KAAK/E,GAElByE,EAAIG,GAAW,CAAC5E,GAGXyE,IACN,IAGH,OACE,gCACE,sBAAKxE,UAAU,mBAAf,UACE,cAAC,EAAD,CAAUY,KAAMA,EAAMC,QAASA,EAASC,MAAOA,IAC/C,cAAC,EAAD,CAAQK,QAASA,OAOR,OAAVL,GACC,qBAAKd,UAAU,YAAf,SACG+E,OAAOC,QAAQX,GAAgBY,KAAI,YAAmB,IAAD,mBAAhBhE,EAAgB,KAAXiE,EAAW,KAGpD,OAFAxC,QAAQC,IAAI1B,EAAKiE,GAGf,sBACElF,UAAS,UACPkC,EAAY,mBAAqB,sBAFrC,UAKE,cAAC,EAAD,CAAKjB,IAAKA,IACV,qBAAKjB,UAAU,YAAf,SACGkF,EAAMD,KAAI,SAACC,GAAD,OACT,gCACE,cAAC,EAAD,CACE9E,KAAM,IAAIwD,KAAgB,IAAXsB,EAAMR,IAClBb,mBAAmB,SACnBsB,MAAM,EAAG,KAEd,cAAC,EAAD,CAAapF,YAAamF,IAC1B,cAAC,EAAD,CAAMnF,YAAamF,MAPXA,EAAMR,qBCvIrBU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAAS+B,eAAe,SAM1BX,M","file":"static/js/main.16fe3194.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Temp = ({ weatherInfo }) => {\r\n  const tempTo1DecimalPlace = (temp) => {\r\n    return Math.round(temp * 10) / 10;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"center-content margin-bottom\r\n    \"\r\n    >{`${tempTo1DecimalPlace(weatherInfo.temp)}Â°c`}</div>\r\n  );\r\n};\r\n\r\nexport default Temp;\r\n","import { React } from \"react\";\r\n\r\nconst Time = ({ time }) => {\r\n  return <div className=\"center-content\">{time}</div>;\r\n};\r\n\r\nexport default Time;\r\n","import React from \"react\";\r\n\r\nconst WeatherIcon = ({ weatherInfo }) => {\r\n  return (\r\n    <img\r\n      src={`http://openweathermap.org/img/wn/${weatherInfo.weather[0].icon}@2x.png`}\r\n      alt={weatherInfo.weather[0].description}\r\n      className=\"center-content\"\r\n    ></img>\r\n  );\r\n};\r\n\r\nexport default WeatherIcon;\r\n","import React from \"react\";\r\n\r\nconst Location = ({ city, country, error }) => {\r\n  return (\r\n    <div className=\"location\">\r\n      {error === null ? `${city}, ${country}` : `${error}`}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return <div className=\"loading\">...Loading</div>;\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\n\r\nconst Day = ({ day }) => {\r\n  return <div className=\"center-content day-margin font\">{day}</div>;\r\n};\r\n\r\nexport default Day;\r\n","import React from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\n\r\nconst Search = ({ setCity }) => {\r\n  return (\r\n    <forms className=\"search-container\">\r\n      <FaSearch className=\"search-icon\" />\r\n      <input className=\"input\" onBlur={(e) => setCity(e.target.value)} />\r\n    </forms>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Error = ({ error }) => {\r\n  return <div className=\"error\">{error}</div>;\r\n};\r\n\r\nexport default Error;\r\n","import { React, useEffect, useState } from \"react\";\nimport Temp from \"./WeatherUpdates/Temp\";\nimport Time from \"./WeatherUpdates/Time\";\nimport WeatherIcon from \"./WeatherUpdates/WeatherIcon\";\nimport Days from \"./WeatherUpdates/Days\";\nimport Location from \"./WeatherUpdates/Location\";\nimport Loading from \"./WeatherUpdates/Loading\";\nimport Day from \"./WeatherUpdates/Day\";\nimport Search from \"./WeatherUpdates/Search\";\nimport Error from \"./WeatherUpdates/Error\";\n\nfunction App() {\n  const [city, setCity] = useState(\"ambleside\");\n  const [country, setCountry] = useState(\"GB\");\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(null);\n  const [sunrise, setSunrise] = useState(null);\n  const [sunset, setSunset] = useState(null);\n  const [daysList, setDaysList] = useState([\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n  ]);\n  const [isDayTime, setIsDayTime] = useState(false);\n  const apiKey = \"7d043bcfc64688d86d552f1455872213\";\n\n  useEffect(() => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\n    )\n      .then((firstResponse) => {\n        if (!firstResponse.ok) {\n          console.log(firstResponse);\n          throw Error; //throwing error which can be caught below\n        }\n        console.log(firstResponse);\n        return firstResponse.json();\n      })\n      .then((firstResponse) => {\n        console.log(firstResponse, firstResponse.sys.sunrise);\n        setCountry(firstResponse.sys.country);\n        setCity(firstResponse.name);\n        setSunrise(firstResponse.sys.sunrise);\n        setSunset(firstResponse.sys.sunset);\n        setError(null);\n        const latitude = firstResponse.coord.lat;\n        const longitude = firstResponse.coord.lon;\n\n        return fetch(\n          `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&units=metric&exclude=current,minutely,alerts&appid=${apiKey}`\n        );\n      })\n      .catch((error) => {\n        console.log(error);\n        setError(\"Unable to get data from the API- Please try again\");\n      })\n      .then((response) => {\n        //console.log(response);\n        return response.json();\n      })\n      .then((response) => {\n        console.log(response);\n        setWeather(response);\n        // const date = new Date(secondResponse.hourly[0].dt * 1000); //multiply unix code by 1000 to get specific date /time\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n\n    const getTimeSeconds = (time) => {\n      const arr = time.split(\":\");\n      const seconds = arr[0] * 3600 + arr[1] * 60;\n      return seconds;\n    };\n\n    //alternative\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString(\"en-gb\");\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString(\"en-gb\");\n    const currentTime = new Date().toLocaleTimeString(\"en-gb\");\n    console.log(sunriseTime, sunsetTime, currentTime);\n    //do the same with time from weatherInfo for time component\n\n    const calculateDayTime =\n      getTimeSeconds(currentTime) > getTimeSeconds(sunriseTime) &&\n      getTimeSeconds(currentTime) < getTimeSeconds(sunsetTime);\n\n    if (calculateDayTime === true) {\n      document.body.classList.add(\"light\");\n      setIsDayTime(true);\n    } else {\n      document.body.classList.remove(\"light\");\n    }\n  }, [sunrise, sunset, city]);\n\n  if (weather === null) {\n    return <Loading />;\n  }\n\n  const weatherReducer = weather.hourly.reduce((acc, weatherInfo) => {\n    const getDate = new Date(weatherInfo.dt * 1000);\n    var date = new Date(getDate);\n    const dayName = date.toLocaleDateString(\"default\", {\n      weekday: \"long\",\n    });\n\n    //console.log(getTime);\n\n    if (acc[dayName]) {\n      //if dayName exists then push in weatherInfo\n      acc[dayName].push(weatherInfo);\n    } else {\n      acc[dayName] = [weatherInfo];\n      //console.log((acc[dayName] = [weatherInfo]));\n    }\n    return acc;\n  }, {});\n  //console.log(weatherReducer);\n\n  return (\n    <div>\n      <div className=\"header-container\">\n        <Location city={city} country={country} error={error} />\n        <Search setCity={setCity} />\n      </div>\n      {/* <div className=\"days-container\">\n        {daysList.map((day) => (\n          <Days day={day} weather={weather} />\n        ))}\n      </div> */}\n      {error === null && (\n        <div className=\"container\">\n          {Object.entries(weatherReducer).map(([day, times]) => {\n            console.log(day, times);\n            //key and value from object created in reducer\n            return (\n              <div\n                className={`${\n                  isDayTime ? \"vertical-dayTime\" : \"vertical-nightTime\"\n                }`}\n              >\n                <Day day={day} />\n                <div className=\"container\">\n                  {times.map((times) => (\n                    <div key={times.dt}>\n                      <Time\n                        time={new Date(times.dt * 1000)\n                          .toLocaleTimeString(\"en-gb\")\n                          .slice(0, 5)}\n                      />\n                      <WeatherIcon weatherInfo={times} />\n                      <Temp weatherInfo={times} />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}